#   Copyright 2008 Sam Chapin
#
#   This file is part of Gospel.
#
#   Gospel is free software: you can redistribute it and/or modify
#   it under the terms of version 3 of the GNU General Public License
#   as published by the Free Software Foundation.
#
#   Gospel is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Gospel.  If not, see <http://www.gnu.org/licenses/>.

&do
&self
&raise:
&currentMessageTarget

# A primitive must not do anything that will prevent GCC's sibling call optimization, including taking a
# pointer to anything in its own automatic memory.

@null null
  void **slot = shallowLookup(oNull, selector(threadContinuation(thread)));
  if (!slot) raise(thread, eMessageNotUnderstood);
  tailcall(primitiveCode(*slot), thread);
!serialized
  valueReturn(string(edenRoot(thread), "<null>"));
!raise:
  die("Exception raised in an environment with no understanding of the $raise: message.");
!identity
  normalReturn;
!interpret
  normalReturn;
!print
  fputs("<null>", stdout);
  fflush(stdout);
  normalReturn;
@internals null
# Used by the core to implement some of the interpreter's behaviour. Not meant for user code.
!vectorLiteral
  int c = vectorLength(evaluated(threadContinuation(thread))) - 1;
  vector v = makeVector(edenRoot(thread), c);
  while (c--) setIdx(v, c, arg(c));
  valueReturn(vectorObject(edenRoot(thread), v));
!methodBody
  int l = vectorLength(evaluated(threadContinuation(thread)));
  valueReturn(l == 1 ? oNull : arg(l - 2));
@object null
!evaluate:in:
  gotoNext(setSubexpressionContinuation(thread,
                                        origin(threadContinuation(thread)),
                                        target,
                                        waitFor(arg(1)),
                                        parseString(safeStringValue(waitFor(arg(0)))),
                                        sIdentity,
                                        emptyVector));
!include:in:
  obj filename = waitFor(arg(0));
  if (!isString(filename)) raise(thread, eStringExpected);
  valueReturn(loadFile(edenRoot(thread), stringData(filename), target, waitFor(arg(1))));
!setProto:
  obj p = arg(0);
  setProto(edenRoot(thread), target, p);
  valueReturn(p);
!== equals
  if (target == waitFor(arg(0))) valueReturn(oTrue);
  valueReturn(oFalse);
!send:
  continuation c = origin(threadContinuation(thread));
  tailcall(doNext,
           setSubexpressionContinuation(thread,
                                        c,
                                        env(c),
                                        dynamicEnv(c),
                                        target,
                                        waitFor(arg(0)),
                                        emptyVector));
!respondsTo:
  obj a = waitFor(arg(0)), t = target;
  for (int i = 0; i < slotCount(t); i++) if (slotName(t, i) == a) valueReturn(oTrue);
  valueReturn(oFalse);
!selectors
  valueReturn(vectorObject(edenRoot(thread), slotNameVector(edenRoot(thread), target)));
!proto
  valueReturn(proto(target));
!channel
  valueReturn(newChannel(edenRoot(thread), target));
!identity
  normalReturn;
!addSlot:as:
  valueReturn(addSlot(edenRoot(thread), target, waitFor(arg(0)), arg(1)));
!setSlot:to:
  void **slot = deepLookup(target, waitFor(arg(0)));
  if (!slot) raise(thread, eSettingNonexistantSlot);
  valueReturn(*slot = arg(1));
!contentsOfSlot:
  void **slot = deepLookup(target, waitFor(arg(0)));
  if (!slot) raise(thread, eGettingNonexistantSlot);
  valueReturn(*slot);
!new
  obj o = slotlessObject(edenRoot(thread), target, hiddenEntity(target));
  setVectorType(o, vectorType(target));
  valueReturn(o);
@vector object
!ofLength:containing:
  int l = safeIntegerValue(waitFor(arg(0)));
  if (l < 0) raise(thread, eNegativeVectorLength);
  obj o = arg(1);
  vector v = makeVector(edenRoot(thread), l);
  while (l--) setIdx(v, l, o);
  valueReturn(vectorObject(edenRoot(thread), v));
!length
  valueReturn(integer(edenRoot(thread), vectorLength(hiddenEntity(target))));
!at:put:ifAbsent:
  int i = safeIntegerValue(waitFor(arg(0)));
  obj v = hiddenEntity(target);
  if (i < 0) i = vectorLength(v) + i;
  if (i < 0 || i >= vectorLength(v)) {
    continuation c = origin(threadContinuation(thread));
    tailcall(doNext,
             setSubexpressionContinuation(thread, c, env(c), dynamicEnv(c), arg(2), sDo, emptyVector));
  }
  valueReturn(setIdx(v, i, arg(1)));
!at:ifAbsent:
  int i = safeIntegerValue(waitFor(arg(0)));
  obj v = hiddenEntity(target);
  if (i < 0) i = vectorLength(v) + i;
  if (i < 0 || i >= vectorLength(v)) {
    continuation c = origin(threadContinuation(thread));
    tailcall(doNext,
             setSubexpressionContinuation(thread, c, env(c), dynamicEnv(c), arg(1), sDo, emptyVector));
  }
  valueReturn(idx(v, i));
@primitive object newAtomVector(temp(), 1, prototypePrimitiveHiddenValue)
!target:withArgumentVector:
  obj code = target, argsObject = waitFor(arg(1));
  if (!isPrimitive(code)) raise(thread, ePrimitiveExpected);
  if (!isVectorObject(argsObject)) raise(thread, eVectorExpected);
  continuation c = threadContinuation(thread);
  life e = edenRoot(thread);
  tailcall(primitiveCode(code),
           setContinuation(thread,
                           newContinuation(e,
                                           origin(c),
                                           oNull,
                                           prefix(e, waitFor(arg(0)), vectorObjectVector(argsObject)),
                                           NIL, // There should be no reason for anyone to examine this.
                                           env(c),
                                           dynamicEnv(c))));
@string object newAtomVector(temp(), 1, 0)
!serialized
  // FIXME: This should probably convert e.g. newlines to "\n".
  vector eden = makeVector(edenRoot(thread), 2);
  obj quote = string(edenIdx(eden, 0), "\""); // TODO: Create this string once, at startup.
  valueReturn(appendStrings(edenIdx(eden, 1), quote, appendStrings(edenIdx(eden, 1), target, quote)));
!++ appending:
  obj a = waitFor(arg(0));
  if (!isString(target) || !isString(a)) raise(thread, eStringExpected);
  valueReturn(appendStrings(edenRoot(thread), target, waitFor(arg(0))));
!print
  if (!isString(target)) raise(thread, eStringExpected);
  fputs(stringData(target), stdout);
  fflush(stdout);
  normalReturn;
@symbol object newAtomVector(temp(), 1, 0)
!serialized
  // TODO: Create the dollarsign string once, at startup.
  valueReturn(appendStrings(edenRoot(thread), string(edenRoot(thread), "$"), target));
@closure object newVector(temp(), 3, oNull, newVector(temp(), 1, oNull), newVector(temp(), 1, oClosure))
!target:withArgumentVector:
  obj code = target, argsObject = waitFor(arg(1));
  if (!isClosure(code)) raise(thread, eClosureExpected);
  if (!isVectorObject(argsObject)) raise(thread, eVectorExpected);
  vector args = vectorObjectVector(argsObject),
         params = closureParams(code),
         e = makeVector(edenRoot(thread), 2);
  if (vectorLength(args) + 1 != vectorLength(params)) raise(thread, eBadArity);
  continuation c = threadContinuation(thread);
  tailcall(doNext,
           setSubexpressionContinuation(thread,
                                        origin(c),
                                        stackFrame(edenIdx(e, 0),
                                                   closureEnv(code),
                                                   params,
                                                   prefix(edenIdx(e, 0), waitFor(arg(0)), args),
                                                   c),
                                        slotlessObject(edenIdx(e, 1), dynamicEnv(c), NIL),
                                        oInternals,
                                        sMethodBody,
                                        closureBody(code)));
!environment
  valueReturn(closureEnv(target));
@code object
!interpret
  continuation c = threadContinuation(thread);
  obj o = continuationTarget(c);
  vector *live = edenRoot(thread);
  tailcall(doNext,
           setContinuation(thread,
                           newContinuation(live,
                                           origin(c),
                                           codeSelector(o),
                                           emptyVector,
                                           prefix(live, codeTarget(o) ?: env(c), codeArgs(o)),
                                           env(c),
                                           dynamicEnv(c))));
@promiseCode object
!interpret
  vector *life = edenRoot(thread);
  promise p = newPromise(life);
  continuation c = threadContinuation(thread);
  newThread(life,
            p,
            env(c),
            dynamicEnv(c),
            hiddenEntity(continuationTarget(c)),
            sIdentity,
            emptyVector);
  valueReturn(p);
@arrowCode object
!from:
  vector eden = makeVector(edenRoot(thread), 2);
  promise p = newPromise(edenIdx(eden, 0));
  continuation c = threadContinuation(thread);
  newThread(edenIdx(eden, 1),
            p,
            env(c),
            dynamicEnv(c),
            oInternals,
            sMethodBody,
            newVector(edenIdx(eden, 1),
                      2,
                      message(edenIdx(eden, 1), arg(0), sIdentity, emptyVector),
                      hiddenEntity(target)));
  valueReturn(p);
@block object
!interpret
  continuation c = threadContinuation(thread);
  obj o = continuationTarget(c);
  valueReturn(newClosure(edenRoot(thread), env(c), blockParams(o), blockBody(o)));
@integer object newAtomVector(temp(), 1, 0)
?serialized
  char buffer[12]; // FIXME: Assumes signed 32-bit fixnums.
  sprintf(buffer, "%d", safeIntegerValue(target));
  valueReturn(string(edenRoot(thread), buffer));
!== equals
  if (safeIntegerValue(target) == safeIntegerValue(waitFor(arg(0)))) normalReturn;
  valueReturn(oFalse);
!< isLessThan
  if (safeIntegerValue(target) < safeIntegerValue(waitFor(arg(0)))) normalReturn;
  valueReturn(oFalse);
!> isGreaterThan
  if (safeIntegerValue(target) > safeIntegerValue(waitFor(arg(0)))) normalReturn;
  valueReturn(oFalse);
!- minus:
  valueReturn(integer(edenRoot(thread),
              safeIntegerValue(target) - safeIntegerValue(waitFor(arg(0)))));
!+ plus:
  valueReturn(integer(edenRoot(thread),
                      safeIntegerValue(target) + safeIntegerValue(waitFor(arg(0)))));
!secondsDelay
  int i = safeIntegerValue(target);
  while (i) i = sleep(i);
  valueReturn(target);
@POSIX null
~POSIX Error during a POSIX system call.
!errno
  valueReturn(integer(edenRoot(thread), errno));
!close:
  if (close(safeIntegerValue(arg(0)))) raise(thread, ePOSIX);
  normalReturn;
!read:from:
  int count = safeIntegerValue(waitFor(arg(0)));
  vector s = makeAtomVector(edenRoot(thread), CELLS_REQUIRED_FOR_BYTES(count + 1));
  char *b = vectorData(s);
  ssize_t i = read(safeIntegerValue(waitFor(arg(1))), b, count);
  if (i == -1) raise(thread, ePOSIX);
  b[i] = 0;
  valueReturn(slotlessObject(edenRoot(thread), oString, s));
!write:to:
  char *s = safeStringValue(waitFor(arg(0)));
  ssize_t i = write(safeIntegerValue(waitFor(arg(1))), s, strlen(s));
  if (i == -1) raise(thread, ePOSIX);
  valueReturn(integer(edenRoot(thread), i));
?bindInternetSocket:to:
  struct sockaddr_in s;
  memset(&s, 0, sizeof(struct sockaddr_in));
  s.sin_family = AF_INET;
  s.sin_port = htons(safeIntegerValue(waitFor(arg(1))));
  s.sin_addr.s_addr = htonl(INADDR_ANY);
  if (bind(safeIntegerValue(waitFor(arg(0))),
           (struct sockaddr *)&s, (socklen_t)sizeof(struct sockaddr_in)))
    raise(thread, ePOSIX);
  normalReturn;
!TCPSocket
  int s = socket(PF_INET, SOCK_STREAM, 0);
  if (s == -1) raise(thread, ePOSIX);
  valueReturn(integer(edenRoot(thread), s));
!listenOn:withMaximumBacklog:
  if (listen(safeIntegerValue(waitFor(arg(0))), safeIntegerValue(waitFor(arg(1)))))
    raise(thread, ePOSIX);
  normalReturn;
?acceptOn:
  struct sockaddr socketParameters;
  socklen_t socketParametersSize = sizeof(struct sockaddr);
  int newSocket = accept(safeIntegerValue(waitFor(arg(0))), &socketParameters, &socketParametersSize);
  if (newSocket == -1) raise(thread, ePOSIX);
  valueReturn(integer(edenRoot(thread), newSocket));
!shutdown:
  if (shutdown(safeIntegerValue(waitFor(arg(0))), SHUT_RDWR)) raise(thread, ePOSIX);
  normalReturn;
@true object
@false object
@exception object
~badArity Wrong number of arguments to closure.
~stringExpected Non-string encountered where string expected.
~stackFrameExpected Something other than a stack frame encountered where stack frame expected.
~primitiveExpected Non-primitive encountered where primitive expected.
~closureExpected Non-closure encountered where closure expected.
~vectorExpected Non-vector encountered where vector expected.
~integerExpected Non-integer encountered where integer expected.
~negativeVectorLength Attempted to create a vector with negative length.
~messageNotUnderstood Message not understood.
~outOfBounds Out-of-bounds array access.
~badReturnDepth Too many carets in return statement.
~topLevelRecursion Attempted to recurse at the top level.
~settingNonexistantSlot Attempted to set a nonexistant slot.
~gettingNonexistantSlot Attempted to access a nonexistant slot.
~missingArgument Too few arguments to primitive function.
@lobby object oInternals
# We stash a pointer to oInternals here to lend it oLobby's immunity to garbage collection.
# It would perhaps make more sense to give oInternals the immunity, and let oLobby borrow it,
# but future changes to the interpreter may eliminate the need for oInternals.
!return:atDepth:
  obj frame = target;
  for (int i = safeIntegerValue(waitFor(arg(1)));;) {
    if (frame == oLobby) raise(thread, eBadReturnDepth);
    if (!i--) break;
    frame = proto(frame);
  }
  obj v = *edenRoot(thread) = arg(0); // Because it might be orphaned when we change continuations.
  setContinuation(thread, safeStackFrameContinuation(frame));
  valueReturn(v);
!return
  if (target == oLobby) raise(thread, eBadReturnDepth);
  setContinuation(thread, safeStackFrameContinuation(target));
  valueReturn(oNull);
!return:
  if (target == oLobby) raise(thread, eBadReturnDepth);
  obj v = *edenRoot(thread) = arg(0); // Because it might be orphaned when we change continuations.
  setContinuation(thread, safeStackFrameContinuation(target));
  valueReturn(v);
!thisContext
  normalReturn;
!recurse
  if (target == oLobby) raise(thread, eTopLevelRecursion);
  tailcall(doNext, setContinuation(thread, safeStackFrameContinuation(target)));
!abortToREPL
  tailcall(returnToREPL, thread);
!abort
  tailcall(returnToREPL, thread);
!end
  killThreadData(thread);
  // Permit a C subroutine return, thus killing the current thread.
$true
$false
$object
$closure
$integer
$null
$lobby
$code
$promiseCode
$arrowCode
$block
$primitive
$string
$symbol
$exception
$vector
$POSIX
!dynamicContext
  valueReturn(dynamicEnv(threadContinuation(thread)));
!collectGarbage
  forbidGC();
  collectGarbage();
  permitGC();
  normalReturn;
!exit
  exit(0);
@dynamicEnvironment object
