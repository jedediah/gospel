#   Copyright 2008 Sam Chapin
#
#   This file is part of Gospel.
#
#   Gospel is free software: you can redistribute it and/or modify
#   it under the terms of version 3 of the GNU General Public License
#   as published by the Free Software Foundation.
#
#   Gospel is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Gospel.  If not, see <http://www.gnu.org/licenses/>.

&do
&raise:

@null null
!serialized
  valueReturn(string(edenRoot(thread), "<null>")); // TODO: Create this once, at startup?
!identity
  normalReturn;
!interpret
  normalReturn;
@interpreter object
!include:
  // Should only be called through a channel.
  *filenameToInclude = arg(0);
  valueReturn(*promiseOfInclusion = newPromise(edenRoot(thread)));
!vectorLiteral
  int c = vectorLength(evaluated(threadContinuation(thread))) - 1;
  vector v = makeVector(edenRoot(thread), c);
  while (c--) setIdx(v, c, arg(c));
  valueReturn(vectorObject(edenRoot(thread), v));
!methodBody
  int l = vectorLength(evaluated(threadContinuation(thread)));
  valueReturn(l == 1 ? oNull : arg(l - 2));
@object null
!== equals
  if (target == arg(0)) valueReturn(oTrue);
  valueReturn(oFalse);
!send:
  continuation c = origin(threadContinuation(thread));
  tailcall(doNext,
           setSubexpressionContinuation(thread, c, env(c), dynamicEnv(c), target, arg(0), emptyVector));
!respondsTo:
  obj a = arg(0), t = target;
  for (int i = 0; i < slotCount(t); i++) if (slotName(t, i) == a) valueReturn(oTrue);
  valueReturn(oFalse);
!selectors
  valueReturn(vectorObject(edenRoot(thread), slotNameVector(edenRoot(thread), target)));
!proto
  valueReturn(delegate(target));
!channel
  valueReturn(newChannel(edenRoot(thread), target));
!slots
  valueReturn(slotlessObject(edenRoot(thread), oSlotCollection, target));
!identity
  normalReturn;
!addSlot:as:
  valueReturn(addSlot(edenRoot(thread), target, waitFor(arg(0)), arg(1)));
!setSlot:to:
  void **slot = deepLookup(target, waitFor(arg(0)));
  if (!slot) raise(thread, eSettingNonexistantSlot);
  valueReturn(*slot = arg(1));
!contentsOfSlot:
  void **slot = deepLookup(target, waitFor(arg(0)));
  if (!slot) raise(thread, eGettingNonexistantSlot);
  valueReturn(*slot);
!interpret
  normalReturn;
!new
  valueReturn(slotlessObject(edenRoot(thread), oObject, 0));
@vector object
!ofLength:containing:
  int l = integerValue(arg(0));
  if (l < 0) raise(thread, eNegativeVectorLength);
  obj o = arg(1);
  vector v = makeVector(edenRoot(thread), l);
  while (l--) setIdx(v, l, o);
  valueReturn(vectorObject(edenRoot(thread), v));
!length
  valueReturn(integer(edenRoot(thread), vectorLength(hiddenEntity(target))));
!at:put:ifAbsent:
  int i = integerValue(arg(0));
  obj v = hiddenEntity(target);
  if (i < 0) i = vectorLength(v) + i;
  if (i < 0 || i >= vectorLength(v)) {
    continuation c = origin(threadContinuation(thread));
    tailcall(doNext,
             setSubexpressionContinuation(thread, c, env(c), dynamicEnv(c), arg(2), sDo, emptyVector));
  }
  valueReturn(setIdx(v, i, arg(1)));
!at:ifAbsent:
  int i = integerValue(arg(0));
  obj v = hiddenEntity(target);
  if (i < 0) i = vectorLength(v) + i;
  if (i < 0 || i >= vectorLength(v)) {
    continuation c = origin(threadContinuation(thread));
    tailcall(doNext,
             setSubexpressionContinuation(thread, c, env(c), dynamicEnv(c), arg(1), sDo, emptyVector));
  }
  valueReturn(idx(v, i));
@primitive object
@string object newAtomVector(temp(), 1, 0)
!serialized
  // FIXME: This should probably convert e.g. newlines to "\n".
  vector eden = makeVector(edenRoot(thread), 2);
  obj quote = string(edenIdx(eden, 0), "\""); // TODO: Create this string once, at startup.
  valueReturn(appendStrings(edenIdx(eden, 1), quote, appendStrings(edenIdx(eden, 1), target, quote)));
!++ appending:
  valueReturn(appendStrings(edenRoot(thread), target, arg(0)));
!print
  fputs(stringData(target), stdout); fflush(stdout);
  normalReturn;
@symbol object newAtomVector(temp(), 1, 0)
!serialized
  // TODO: Create the dollarsign string once, at startup.
  valueReturn(appendStrings(edenRoot(thread), string(edenRoot(thread), "$"), target));
@closure object
@code object
!interpret
  continuation c = threadContinuation(thread);
  obj o = continuationTarget(c);
  vector *live = edenRoot(thread);
  tailcall(doNext,
           setContinuation(thread,
                           newContinuation(live,
                                           origin(c),
                                           codeSelector(o),
                                           emptyVector,
                                           prefix(live, codeTarget(o) ?: env(c), codeArgs(o)),
                                           env(c),
                                           dynamicEnv(c))));
@promiseCode object
!interpret
  vector *life = edenRoot(thread);
  promise p = newPromise(life);
  continuation c = threadContinuation(thread);
  newThread(life,
            p,
            env(c),
            dynamicEnv(c),
            hiddenEntity(continuationTarget(c)),
            sIdentity,
            emptyVector);
  valueReturn(p);
@arrowCode object
!from:
  if (isPromise(arg(0))) {
    vector eden = makeVector(edenRoot(thread), 2);
    promise p = newPromise(edenIdx(eden, 0));
    continuation c = threadContinuation(thread);
    newThread(edenIdx(eden, 1),
              p,
              env(c),
              dynamicEnv(c),
              oInterpreter,
              sMethodBody,
              newVector(edenIdx(eden, 1),
                        2,
                        message(edenIdx(eden, 1), arg(0), sIdentity, emptyVector),
                        hiddenEntity(target)));
    valueReturn(p);
  }
  continuation c = origin(threadContinuation(thread));
  tailcall(doNext,
           setSubexpressionContinuation(thread,
                                        c,
                                        env(c),
                                        dynamicEnv(c),
                                        hiddenEntity(target),
                                        sIdentity,
                                        emptyVector));
@block object
!interpret
  continuation c = threadContinuation(thread);
  obj o = continuationTarget(c);
  valueReturn(newClosure(edenRoot(thread), env(c), blockParams(o), blockBody(o)));
@integer object newAtomVector(temp(), 1, 0)
!serialized
  char buffer[12]; // FIXME: Assumes signed 32-bit fixnums.
  sprintf(buffer, "%d", integerValue(target));
  valueReturn(string(edenRoot(thread), buffer));
!== equals
  if (proto(arg(0)) != oInteger) raise(thread, eBadArithmetic); // FIXME: Insufficient test.
  if (integerValue(target) == integerValue(arg(0))) normalReturn;
  valueReturn(oFalse);
!< isLessThan
  if (integerValue(target) < integerValue(arg(0))) normalReturn;
  valueReturn(oFalse);
!> isGreaterThan
  if (integerValue(target) > integerValue(arg(0))) normalReturn;
  valueReturn(oFalse);
!- minus
  valueReturn(integer(edenRoot(thread), integerValue(target) - integerValue(arg(0))));
!print
  printf("%d", hiddenAtom(target)); fflush(stdout);
  normalReturn;
!+ plus
  obj n = waitFor(arg(0));
  if (delegate(n) != oInteger) raise(thread, eBadArithmetic);
  valueReturn(integer(edenRoot(thread), integerValue(target) + integerValue(n)));
!secondsDelay
  int i = integerValue(target);
  while (i) i = sleep(i);
  valueReturn(target);
@byteVector object
!length
  valueReturn(integer(edenRoot(thread), vectorLength(hiddenEntity(target)) / sizeof(int)));
@file object
!close
  if (close((int)hiddenAtom(target))) raise(thread, eClosingFile);
  normalReturn;
!readBytes:
  vector *live = edenRoot(thread), living = makeVector(live, 3);
  int length = integerValue(waitFor(arg(0)));
  vector buffer = makeAtomVector(idxPointer(living, 0), (length + sizeof(int) - 1) / sizeof(int));
  int count = read(integerValue(call(idxPointer(living, 1),
                                     dynamicEnv(threadContinuation(thread)),
                                     target,
                                     sPosixFileDescriptor,
                                     emptyVector)),
                   buffer->data,
                   length);
  vector result = makeAtomVector(idxPointer(living, 2), (count + sizeof(int) - 1) / sizeof(int));
  memcpy(result->data, buffer->data, count);
  valueReturn(slotlessObject(live, oByteVector, result));
@socket file
!posixFileDescriptor
  valueReturn(integer(edenRoot(thread), (int)hiddenAtom(target)));
!new
  int s = socket(PF_INET, SOCK_STREAM, 0);
  if (s == -1) raise(thread, eOpeningSocket);
  vector *live = edenRoot(thread);
  valueReturn(slotlessObject(live, oSocket, newAtomVector(live, 1, s)));
!bind:
  struct sockaddr_in s;
  memset(&s, 0, sizeof(struct sockaddr_in));
  s.sin_family = AF_INET;
  s.sin_port = htons(integerValue(waitFor(arg(0))));
  s.sin_addr.s_addr = htonl(INADDR_ANY);//inet_addr("127.0.0.1");
  if (bind((int)hiddenAtom(target), (struct sockaddr *)&s, sizeof(struct sockaddr_in)))
    raise(thread, eBindingSocket);
  normalReturn;
!listen
  if (listen((int)hiddenAtom(target), 42)) // TODO: Set the backlog number in a sane way.
    raise(thread, eListeningOnSocket);
  normalReturn;
!accept
  struct sockaddr socketParameters;
  int socketParametersSize = sizeof(struct sockaddr);
  int socketHandle = accept((int)hiddenAtom(target), &socketParameters, &socketParametersSize);
  if (socketHandle == -1) raise(thread, eAcceptingSocketConnection);
  vector *live = edenRoot(thread);
  valueReturn(slotlessObject(live, oSocket, newAtomVector(live, 1, socketHandle)));
!read:
  int length = integerValue(waitFor(arg(0)));
  vector *live = edenRoot(thread);
  obj string = slotlessObject(live, oString, makeAtomVector(live, length));
  if (recv((int)hiddenAtom(target), vectorData(hiddenEntity(string)), length, 0) == -1)
    raise(thread, eReadingFromSocket);
  valueReturn(string);
@true object
@false object
@slotCollection object
!includesKey:
  obj o = hiddenEntity(target), key = arg(0);
  for (int i = 0; i < slotCount(o); i++) if (slotName(o, i) == key) valueReturn(oTrue);
  valueReturn(oFalse);
!at:put:
  obj o = hiddenEntity(target), key = arg(0), value = arg(1);
  for (int i = 0; i < slotCount(o); i++)
    if (slotName(o, i) == key)
      valueReturn(setSlotByIndex(o, i, value));
  valueReturn(addSlot(edenRoot(thread), o, key, value));
@exception object
~negativeVectorLength Attempted to create a vector with negative length.
~messageNotUnderstood Message not understood.
~readingFromSocket Error while reading from a socket.
~openingSocket Error while opening a socket.
~bindingSocket Error while binding a socket.
~listeningOnSocket Error while beginning to listen on a socket.
~acceptingSocketConnection Error while accepting a connection on a socket.
~closingFile Error while closing a file.
~outOfBounds Out-of-bounds array access.
~badReturnDepth Too many carets in return statement.
~topLevelRecursion Attempted to recurse at the top level.
~settingNonexistantSlot Attempted to set a nonexistant slot.
~gettingNonexistantSlot Attempted to access a nonexistant slot.
~badArithmetic Type error in arithmetic expression.
# TODO: Store the arity of primitives and check number of arguments when dispatching.
~missingArgument Too few arguments to primitive function.
@lobby object
!return:atDepth:
  // TODO: This can fail if the user modifies "thisContext proto". Find ways to make it more robust?
  obj frame = target;
  for (int i = integerValue(arg(1)) + 1;;) {
    if (frame == oLobby) raise(thread, eBadReturnDepth);
    if (!i--) break;
    frame = proto(frame);
  }
  obj v = setShelter(thread, arg(0));
  setContinuation(thread, hiddenEntity(frame));
  valueReturn(v);
!return
  if (target == oLobby) raise(thread, eBadReturnDepth);
  setContinuation(thread, hiddenEntity(proto(target)));
  valueReturn(oNull);
!return:
  if (target == oLobby) raise(thread, eBadReturnDepth);
  obj v = *edenRoot(thread) = arg(0);
  setContinuation(thread, hiddenEntity(proto(target)));
  valueReturn(v);
!thisContext
  normalReturn;
!recurse
  if (target == oLobby) raise(thread, eTopLevelRecursion);
  tailcall(doNext, setContinuation(thread, hiddenEntity(target)));
!abortToREPL
  tailcall(returnToREPL, thread);
!self
  normalReturn;
!abort
  tailcall(returnToREPL, thread);
!end
  killThreadData(thread);
  // Permit a C subroutine return, thus killing the current thread.
$true
$false
$object
$closure
$integer
$null
$lobby
$file
$socket
$slotCollection
$byteVector
$code
$promiseCode
$arrowCode
$block
$primitive
$string
$symbol
$interpreter newChannel(temp(), oInterpreter)
$exception
$vector
!dynamicContext
  valueReturn(dynamicEnv(threadContinuation(thread)));
!collectGarbage
  forbidGC();
  collectGarbage();
  permitGC();
  normalReturn;
!freeSpaceCount
  valueReturn(integer(edenRoot(thread), freeSpaceCount()));
!exit
  exit(0);
@dynamicEnvironment object
